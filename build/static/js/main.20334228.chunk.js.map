{"version":3,"sources":["components/FetchData.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","require","FetchData","props","md","Remarkable","handleChange","bind","handleChange2","handleChange3","state","subreddit","loading","response","responseShown","cardsToShow","cardTextLength","filter","console","log","clean","e","this","setState","target","value","slice","myFunction","url","fetch","json","data","dataArr","children","className","type","id","onChange","defaultValue","map","item","index","title","selftext","substr","length","React","Component","App","name","content","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20334228.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactMarkdown from 'react-markdown';\r\nimport { Remarkable } from 'remarkable';\r\nimport './Cards.css';\r\nvar Filter = require('bad-words');\r\n\r\nexport default class FetchData extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.md = new Remarkable();\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleChange2 = this.handleChange2.bind(this);\r\n        this.handleChange3 = this.handleChange3.bind(this);\r\n        this.state = {\r\n            subreddit: 'webdev',\r\n            loading: true,\r\n            response: [],\r\n            responseShown: [],\r\n            cardsToShow: \"10\",\r\n            cardTextLength: 800\r\n        };\r\n        \r\n        this.filter = new Filter();\r\n        console.log(this.filter.clean(\"Don't be an ash0le\"));\r\n\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({             \r\n            cardsToShow: e.target.value,\r\n            responseShown: this.state.response.slice(0, e.target.value)\r\n        });\r\n        console.log(this.state.response);\r\n        console.log(this.state.responseShown);\r\n    } \r\n\r\n    handleChange2(e) {        \r\n        this.setState({ \r\n            cardTextLength: e.target.value \r\n        });\r\n    } \r\n\r\n    handleChange3(e) {\r\n        console.log(\"HC3 - \" + e.target.value);\r\n        this.setState({             \r\n            subreddit: e.target.value\r\n        }, () => {\r\n            this.myFunction();\r\n        });\r\n    } \r\n\r\n    async componentDidMount(){\r\n        this.myFunction();        \r\n    }\r\n\r\n    async myFunction(){\r\n        console.log(\"1 - \" + this.state.subreddit);\r\n        // get data\r\n        const url = 'https://www.reddit.com/r/'+this.state.subreddit+'/.json?limit=50';\r\n        const response = await fetch(url);\r\n        const data = await response.json();\r\n\r\n        // set data\r\n        let dataArr = [];\r\n        try{\r\n            dataArr = data.data.children;\r\n            console.log(\"2\");\r\n        } catch(e){\r\n            console.log(\"Data could not be parsed.\");            \r\n        }\r\n\r\n        this.setState({\r\n            response: dataArr,\r\n            responseShown: dataArr.slice(0,this.state.cardsToShow)\r\n        });\r\n        console.log(this.state.response);\r\n        console.log(this.state.responseShown);\r\n\r\n        this.setState({\r\n            loading: false\r\n        });        \r\n\r\n    }\r\n\r\n    render() {\r\n        return    <div>\r\n                        <div className=\"inputGroup\">\r\n                            <div className=\"group\">\r\n                                <label>Subreddit:</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"markdown-content\"\r\n                                    onChange={this.handleChange3}\r\n                                    defaultValue={this.state.subreddit}\r\n                                />\r\n                            </div>\r\n                            <div className=\"group\">                          \r\n                                <label>Cards:</label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"markdown-content\"\r\n                                    onChange={this.handleChange}\r\n                                    defaultValue={this.state.cardsToShow}\r\n                                />\r\n                            </div>\r\n                             <div className=\"group\">  \r\n                                <label>Length:</label>\r\n                                <input\r\n                                    type=\"number\"\r\n                                    id=\"markdown-content\"\r\n                                    onChange={this.handleChange2}\r\n                                    defaultValue={this.state.cardTextLength}\r\n                                />                               \r\n                            </div>\r\n                        </div>     \r\n                                                                \r\n                        { this.state.loading ? 'Loading...' : ''}\r\n                        {\r\n                            \r\n                            this.state.responseShown.map(((item, index) => \r\n                            <div className='card-component'>         \r\n                                    <div className='title'>{item.data.title}</div>                    \r\n                                    <div className='message'> \r\n                                        <ReactMarkdown>\r\n                                            {\r\n                                                \r\n                                                (item.data.selftext.substr(0,this.state.cardTextLength))\r\n                                            }\r\n                                            </ReactMarkdown>\r\n                                        { this.state.cardTextLength < item.data.selftext.length ? '...' : ''}\r\n                                    </div>\r\n                                </div>\r\n                            ))\r\n                        }\r\n                  </div>;\r\n    }\r\n}","import React from 'react';\nimport FetchData from './components/FetchData';\nimport MetaTags from 'react-meta-tags';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {  \n    return <div className=\"App\">\n      <MetaTags>\n        <title>Reactive Reading App v.1</title>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"></meta>\n      </MetaTags>\n      <header className=\"App-header\">        \n        <h1>Reactive Reading App v.1</h1>   \n        <h2>✅Set cards amount ✅Set text length ✅No annoying images</h2>     \n      </header> \n      <FetchData></FetchData> \n                \n    </div>\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}